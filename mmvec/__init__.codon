
import math
import python
from typing import Tuple, List, overload, Ptr,Array
import functools, operator
VectorTuple = Tuple[float, float, float]
VectorList = List[float]
LineTuple = Tuple[VectorTuple, VectorTuple]
ExtendedVectorTuple = Tuple[float, float, float, float]
TransformTuple = Tuple[ExtendedVectorTuple, ExtendedVectorTuple, ExtendedVectorTuple, ExtendedVectorTuple]
OptionalVectorTuple= Optional[Tuple[float,float,float]]
TransformList = List[List[float]]


def extend_tuple(t: VectorTuple) -> ExtendedVectorTuple:
    return t[0], t[1], t[2], 1.0


def reduce_tuple(t: ExtendedVectorTuple) -> VectorTuple:
    return t[0], t[1], t[2]


# def transform_list_to_tuple(m: TransformList) -> TransformTuple:
#    return tuple(m[0]), tuple(m[1]), tuple(m[2]), tuple(m[3])


def transform_tuple_to_list(m: TransformTuple) -> TransformList:
    return [list(m[0]), list(m[1]), list(m[2]), list(m[3])]


def dot(u: Tuple[float, float, float], v: Tuple[float, float, float]) -> float:
    """
    3D dot product
    @param u:
    @param v:
    @return: float
    """

    return u[0] * v[0] + u[1] * v[1] + u[2] * v[2]


def norm(v: Tuple[float, float, float]) -> float:
    """
    norm is a length of  vector
    @param v:
    @return:
    """
    return math.sqrt(dot(v, v))


def subvec(u: VectorTuple, v: VectorTuple) -> VectorTuple:
    return u[0] - v[0], u[1] - v[1], u[2] - v[2]


def addvec(u: VectorTuple, v: VectorTuple) -> VectorTuple:
    return u[0] + v[0], u[1] + v[1], u[2] + v[2]


def divvec(u: VectorTuple, f: float) -> VectorTuple:
    return u[0] / f, u[1] / f, u[2] / f


def mulvec(u: VectorTuple, v: float) -> VectorTuple:
    return u[0] * v, u[1] * v, u[2] * v


def dist(P: VectorTuple, Q: VectorTuple) -> float:
    """
    distance is a norm of difference
    @param P: vector
    @param Q: vector
    @return: float
    True
    """
    return norm(subvec(P, Q))


def unit(vec: VectorTuple) -> VectorTuple:
    """pure unit implementation"""

    nv = norm(vec)
    return vec[0] / nv, vec[1] / nv, vec[2] / nv


def cross(a: VectorTuple, b: VectorTuple) -> VectorTuple:
    """pure cross product implementation"""

    return a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]


def angle(a: VectorTuple, b: VectorTuple) -> float:
    """pure angle implementation"""
    return math.acos(dot(unit(a), unit(b)))


def transpose(matrix: TransformList):
    """
    Transposes a 4x4 matrix.

    Parameters:
    matrix (list): A list of lists representing the matrix.

    Returns:
    list: A list of lists representing the transposed matrix.
    """
    # Create an empty matrix to hold the result
    result: List[List[float]] = [[0.0 for j in range(4)] for i in range(4)]

    # Transpose the matrix
    for i in range(4):
        for j in range(4):
            print(i, j)
            result[i][j] = matrix[j][i]

    return result

def rotation_matrix(angle: float, axis: VectorTuple) -> TransformList:
    """
    Returns a 4x4 transformation matrix that performs a rotation of the given angle around the given axis.
    Parameters:
    angle (float): The angle of rotation, in radians.
    axis (numpy.ndarray): An array of shape (3,) representing the rotation axis.
    Returns:
    numpy.ndarray: A 4x4 transformation matrix representing the rotation.
    """
    # Normalize the rotation axis
    axis = unit(axis)
    # Compute the sin and cosine of the angle of rotation
    c = math.cos(angle)
    s = math.sin(angle)
    # Compute the components of the rotation matrix
    x = axis[0]
    y = axis[1]
    z = axis[2]
    xs = x * s
    ys = y * s
    zs = z * s
    c1 = 1 - c
    xyc1 = x * y * c1
    xzc1 = x * z * c1
    yzc1 = y * z * c1
    # Construct the 4x4 transformation matrix
    return [[x * x * c1 + c, xyc1 - zs, xzc1 + ys, 0.0], [xyc1 + zs, y * y * c1 + c, yzc1 - xs, 0.0],
            [xzc1 - ys, yzc1 + xs, z * z * c1 + c, 0.0], [0.0, 0.0, 0.0, 1.0]]


def zeros() -> TransformList:
    return [[0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0],
            [0.0, 0.0, 0.0, 0.0]]

def zero_transform() -> TransformList:

    return [[1.0, 0.0, 0.0, 0.0],
            [0.0, 1.0, 0.0, 0.0],
            [0.0, 0.0, 1.0, 0.0],
            [0.0, 0.0, 0.0, 1.0]]
def trxmul(t1, t2):
    def mr(m1, m2):
        mmm = zeros()

        for i in range(len(m1)):

            for j in range(len(m2)):
                r=0.0
                for k in zip(range(len(m1[i])), range(len(m2[j]))):
                    r+=m1[j][k[1]] * m2[i][k[0]]

                mmm[i][j] =  r
        return mmm

    return mr(transpose(t1), t2)

def matmul_point(m1:TransformList,point:VectorList)->VectorList:

    z=[0.0,0.0,0.0]
    for i in range(3):
        for j in range(3):
            z[i] += m1[i][j] * point[j]
    return z
def combine(t1: TransformList, t2: TransformList) -> TransformList:
    """
    Combines two 4x4 transformation matrices and returns the result.

    Parameters:
    matrix1 (list): A list of lists representing the first matrix.
    matrix2 (list): A list of lists representing the second matrix.

    Returns:
    list: A list of lists representing the combined matrix.
    """
    # Create an empty matrix to hold the result


    # Multiply the matrices
    def mr(m1, m2):
        mmm = zeros()

        for i in range(len(m1)):

            for j in range(len(m2)):
                r = 0.0
                for k in zip(range(len(m1[i])), range(len(m2[j]))):
                    r += m1[j][k[1]] * m2[i][k[0]]

                mmm[i][j] = r
        return mmm
    return mr(transpose(t1), t2)


def transform_mul_inplace(matrix1: TransformList, matrix2: TransformList):
    for i in range(4):
        for j in range(4):
            for k in range(4):
                matrix1[i][j] = matrix1[i][k] * matrix2[k][j]


def transform_point(point: VectorTuple, matrix: TransformList):
    """
    Applies a 4x4 transformation matrix to a three-dimensional point.
    Parameters:
    point (list): A list of length 3 representing the point to be transformed.
    matrix (list): A list of lists representing a 4x4 transformation matrix.
    Returns:
    list: A list of length 3 representing the transformed point.
    """
    # Append 1 to the point to make it a homogeneous coordinate
    point = extend_tuple(point)
    # Apply the transformation matrix to the point
    x = point[0] * matrix[0][0] + point[1] * matrix[0][1] + point[2] * matrix[0][2] + matrix[0][3]
    y = point[0] * matrix[1][0] + point[1] * matrix[1][1] + point[2] * matrix[1][2] + matrix[1][3]
    z = point[0] * matrix[2][0] + point[1] * matrix[2][1] + point[2] * matrix[2][2] + matrix[2][3]
    w = point[0] * matrix[3][0] + point[1] * matrix[3][1] + point[2] * matrix[3][2] + matrix[3][3]
    # Divide by the last coordinate to convert back to Cartesian coordinates
    x /= w
    y /= w
    z /= w
    # Remove the last coordinate to get the transformed point
    transformed_point = (x, y, z)
    return transformed_point


_trx_index_name:List[str]=["a", "b", "c", "d", "e", "f", "g", "h", "i, j", "k", "l", "m", "n", "o", "p"]
_trx_index_ij:List[Tuple[int,int]]=[(0, 0),
                                               (0, 1),
                                               (0, 2),
                                               (0, 3),
                                               (1, 0),
                                               (1, 1),
                                               (1, 2),
                                               (1, 3),
                                               (2, 0),
                                               (2, 1),
                                               (2, 2),
                                               (2, 3),
                                               (3, 0),
                                               (3, 1),
                                               (3, 2),
                                               (3, 3)]

class TrxIndex:

    i: int


    def __init__(self,  i:int):

        self.i=i
        self._name=self.name

    @property
    def ij(self):
        global _trx_index_ij
        return _trx_index_ij[self.i]

    @property
    def name(self):
        return _trx_index_name[self.i]

    @property
    def matrix_name(self):
        return f"m{self.ij[0]}{self.ij[1]}"

    def __get__(self, instance:TransformList, owner:Optional[TransformList]=None):
        return instance[self.ij[0]][self.ij[1]]


    def __set__(self, instance:TransformList, value: float):
        instance[self.ij[0]][self.ij[1]]=value





class Transform:
    _m:  Ptr[float]
    a: TrxIndex = TrxIndex(0)
    b: TrxIndex = TrxIndex(1)
    c: TrxIndex = TrxIndex(2)
    d: TrxIndex = TrxIndex(3)
    e: TrxIndex = TrxIndex(4)
    f: TrxIndex = TrxIndex(5)
    g: TrxIndex = TrxIndex(6)
    h: TrxIndex = TrxIndex(7)
    i: TrxIndex = TrxIndex(8)
    j: TrxIndex = TrxIndex(9)
    k: TrxIndex = TrxIndex(10)
    l: TrxIndex = TrxIndex(11)
    m: TrxIndex = TrxIndex(12)
    n: TrxIndex = TrxIndex(13)
    o: TrxIndex = TrxIndex(14)
    p: TrxIndex = TrxIndex(15)


    def init_descr(cls):
        cls.a = TrxIndex(0)
        cls.b = TrxIndex(1)
        cls.c = TrxIndex(2)
        cls.d = TrxIndex(3)
        cls.e = TrxIndex(4)
        cls.f = TrxIndex(5)
        cls.g = TrxIndex(6)
        cls.h = TrxIndex(7)
        cls.i = TrxIndex(8)
        cls.j = TrxIndex(9)
        cls.k = TrxIndex(10)
        cls.l = TrxIndex(11)
        cls.m = TrxIndex(12)
        cls.n = TrxIndex(13)
        cls.o = TrxIndex(14)
        cls.p = TrxIndex(15)









    def init_ptr(self):
        self._m = Ptr[float](16)
        vals:List[float]=[1.0, 0.0, 0.0, 0.0,0.0, 1.0, 0.0, 0.0,0.0, 0.0, 1.0, 0.0,0.0, 0.0, 0.0, 1.0]
        for i in range(16):

           self._m[i]=vals[i]

    def __new__(cls):
        obj=super().__new__(cls)
        obj.init_ptr()

        return obj



    def is_zero(self):
       return (self.a, self.b, self.c, self.d,
        self.e, self.f, self.g, self.h,
        self.i, self.j, self.k, self.l,
        self.m, self.n, self.o, self.p) ==(
           1.0, 0.0, 0.0, 0.0,
           0.0, 1.0, 0.0, 0.0,
           0.0, 0.0, 1.0, 0.0,
           0.0, 0.0, 0.0, 1.0)
@extend
class TrxIndex:
    @overload
    def __get__(self, instance:Transform,owner: Optional[Transform] = None):

        return instance._m[self.i]


    @overload
    def __set__(self, instance: Transform, value:float):
        instance._m[self.i]=value


    def __set_name__(self, owner:Transform, name:str):

        _trx_index_name[self.i]=name
        self._name = name


@extend
class Transform:





    @overload
    def __init__(self: Transform):
       self.a, self.b, self.c, self.d, \
           self.e, self.f, self.g, self.h, \
           self.i, self.j, self.k, self.l, \
           self.m, self.n, self.o, self.p = (
           1.0, 0.0, 0.0, 0.0,
           0.0, 1.0, 0.0, 0.0,
           0.0, 0.0, 1.0, 0.0,
           0.0, 0.0, 0.0, 1.0)

    @overload
    def __init__(self: Transform, translate: VectorTuple = (0, 0, 0)):
        self.a, self.b, self.c, self.d, \
           self.e, self.f, self.g, self.h, \
           self.i, self.j, self.k, self.l, \
           self.m, self.n, self.o, self.p = (1.0, 0.0, 0.0, translate[0],
                                             0.0, 1.0, 0.0, translate[1],
                                             0.0, 0.0, 1.0, translate[2],
                                             0.0, 0.0, 0.0, 1.0)

    @overload
    def __init__(self: Transform, scale_x: float = 1.0, scale_y: float = 1.0, scale_z: float = 1.0):
        self.a, self.b, self.c, self.d, \
            self.e, self.f, self.g, self.h, \
           self.i, self.j, self.k, self.l, \
           self.m, self.n, self.o, self.p = (scale_x, 0.0, 0.0, 0,
                                             0.0, scale_y, 0.0, 0,
                                             0.0, 0.0, scale_z, 0,
                                             0.0, 0.0, 0.0, 1.0)

    @overload
    def __init__(self: Transform, angle: float = 0.0, axis: VectorTuple = (0, 0, 1)):
        self.a, self.b, self.c, self.d, \
            self.e, self.f, self.g, self.h, \
            self.i, self.j, self.k, self.l, \
            self.m, self.n, self.o, self.p = rotation_matrix(angle, axis)

    @overload
    def __init__(self: Transform, matrix: TransformList):
        self.a, self.b, self.c, self.d, \
            self.e, self.f, self.g, self.h, \
           self.i, self.j, self.k, self.l, \
           self.m, self.n, self.o, self.p = list(matrix[0]) + list(matrix[1]) + list(matrix[2]) + list(matrix[3])

    @overload
    def __imatmul__(self: Transform, other: Transform):
        self.a, self.b, self.c, self.d, \
            self.e, self.f, self.g, self.h, \
            self.i, self.j, self.k, self.l, \
            self.m, self.n, self.o, self.p = combine(self.list(), other.list())

    def __rmatmul__(self, other: Transform) -> Transform:
        return Transform(matrix=combine(other.list(), self.list()))

    def __matmul__(self, other: Transform) -> Transform:
        return Transform(matrix=combine(self.list(), other.list()))

    def __matmul__(self, other: VectorTuple) -> VectorTuple:
        return transform_point(other, self.list())

    def transform(self, other: Transform):
        self.__imatmul__(other)

    def astuple(self) -> TransformList:
        return ((self.aself.b, self.c, self.d),
                (self.e, self.f, self.g, self.h),
                (self.i, self.j, self.k, self.l),
                (self.m, self.n, self.o, self.p))

    def list(self) -> TransformList:
        return [[self.a, self.b, self.c, self.d],
                [self.e, self.f, self.g, self.h],
                [self.i, self.j, self.k, self.l],
                [self.m, self.n, self.o, self.p]]

    def tolist(self) -> List[float]:

        return [self._m[i] for i in range(16)]



"""
def _trx( i)->Transform:
                      return Transform.__ptr__(i)
def ptrfromint(p: int, T:type)->Ptr[T]:
    pp:Ptr[T]=ptr(ptr)

    return pp




@dataclass(python=True)
class TransformBind:
    _ptr:int
    def __init__(self):
        _t=Transform()
        ptr=Ptr[Transform](1)
        ptr[0]=_t

        self._ptr=int(ptr[0])
    def __getitem__(self, i:Tuple[int, int])->float:

        return _trx(self._ptr)._m[self.convert_index(i)]
    @overload
    def __getitem__(self, i:int)->List[float]:

        return _trx(self._ptr)._m[self.convert_index(i)]
    def __setitem__(self, i:Tuple[int, int], v:float):


        _trx(self._ptr)._m[self.convert_index(i)]=v


    def convert_index(self, i:Tuple[int,int])->int:

        ii, jj = i
        return jj + ii * 4

    def convert_indexes(self, i: int) -> Tuple[int,int]:

        return _trx_index_ij[i]
    def __iter__(self):
        return (item for item in self._trx(self._ptr).list())
    def __len__(self)->int:
        return 4
    @property
    def shape(self)->Tuple[int]:
        return (4,4)

    @property
    def shape(self) -> Tuple[int]:
        return (4, 4)



"""

class Vector:

    _tup: Ptr[float]
    def __init__(self, x:float, y:float, z:float):
        self._tup = Ptr[float](3)

        self._tup[0]=x
        self._tup[1] = y
        self._tup[2] = z
    @overload
    def __init__(self, vec:VectorTuple):
        self._tup[0] = vec[0]
        self._tup[1] = vec[1]
        self._tup[2] = vec[2]
    @property
    def x(self)->float:
        return self._tup[0]

    @property
    def y(self) -> float:
        return self._tup[1]

    @property
    def z(self) -> float:
        return self._tup[2]
    def __add__(self, other: Vector) -> Vector:
        return Vector(self._tup[0] + other.x, self._tup[1] + other.y, self._tup[2] + other.z)


    def __repr__(self):
        return f'Vector({self._tup[0]}, {self._tup[1]}, {self._tup[2]})'

    def __iter__(self):
        return iter([self._tup[0], self._tup[1], self._tup[2]])

    def __mul__(self, other: float) -> Vector:
        return Vector(mulvec(self.astuple(), other))

    def __truediv__(self, other: float) -> Vector:
        return Vector(divvec(self.astuple(), other))

    def __len__(self) -> int:
        return 3

    def __sub__(self, other: Vector) -> Vector:
        return Vector(self.x - other.x, self.y - other.y, self.z - other.z)

    def astuple(self) -> VectorTuple:
        return self.x, self.y, self.z

    def aslist(self) -> List[float]:
        return [self.x, self.y, self.z]

    def __getitem__(self, item: int) -> float:
        return self.aslist()[item]

    def dot(self, other: Vector) -> float:
        return dot(self.astuple(), other.astuple())

    def cross(self, other: Vector) -> Vector:
        return Vector(cross(self.astuple(), other.astuple()))

    def dist(self, other: Vector) -> float:
        return dist(self.astuple(), other.astuple())

    def angle(self, other: Vector) -> float:
        return angle(self.astuple(), other.astuple())

    def unit(self) -> Vector:
        return Vector(unit(self.astuple()))

    def norm(self) -> float:
        return norm(self.astuple())
 


    # def __matmul__(self, other: Vector) -> float:
    #    return dot(self.astuple(), other.astuple())
    #
    # def __rmatmul__(self, other: Transform) -> Vector:
    #    return transform_point(self.astuple(), other.astuple())

vecs=Ptr[Vector](4)
ii:int=0
vecs[0]=Vector(0.0,1.1,2.2)
@dataclass(python=True)
class Vec:
    x:float
    y:float
    z:float

    def __add__(self,other:Vec):
        return Vec(*addvec((self.x,self.y,self.z), (other.x,other.y,other.z)))
    def __sub__(self,other:Vec):
        return Vec(*subvec((self.x,self.y,self.z), (other.x,other.y,other.z)))
    def __mul__(self,other:float):
        return Vec(*mulvec((self.x,self.y,self.z), other))
    def __truediv__(self,other:float):
        return Vec(*divvec((self.x,self.y,self.z), other))
    def __matmul__(self,other:TransformList):

        return Vec(*transform_point((self.x,self.y,self.z), other))
    def transform(self, other:TransformList):
        return Vec(*transform_point((self.x,self.y,self.z), other))
    def __repr__(self):
        return f"Vec({self.x}, {self.y}, {self.z})"
def vector(i:int)->Vec:
    v=vecs[i]
    return Vec(v.x,v.y,v.z)


def _evaluate_line(start:VectorTuple,vec:VectorTuple, t: List[float])->List[OptionalVectorTuple]:
        arr = [None]*len(t)
        i = 0
        for u in t:
            arr[i] = addvec(start, mulvec(vec, u))
            i += 1
        return arr

def _evaluate_line_single(
    start: VectorTuple, vec: VectorTuple, t: float
) -> OptionalVectorTuple:


    return addvec(start, mulvec(vec, t))





@overload
def _evaluate_line(start:VectorTuple,vec:VectorTuple, t: float) -> VectorTuple:
    return addvec(start, mulvec(vec, t))

# @dataclass(python=True)
# class PointLineSolution:
#    t:float
#    point:Vector
#
LineTuple = Tuple[VectorTuple,VectorTuple]

def proximity_points(line1:LineTuple , line2:LineTuple )->Tuple[float,float]:
   # Extract points and directions from input lines
   p1, v1 = line1
   p2, v2 = line2

   # Calculate direction vector of the line connecting the two points
   w = subvec(p1,  p2   )

   # Calculate direction vectors of the two input lines
   a = dot( v1, v1)
   b = dot( v1, v2)
   c = dot( v2, v2)
   d = dot( v1, w)
   e = dot( v2, w)

   # Calculate parameters for the two closest points
   t = (b * e - c * d) / (a * c - b ** 2)
   s = (a * e - b * d) / (a * c - b ** 2)

   # Calculate the two closest points
   return t,  s


def closest_point_on_line(point:VectorTuple, line:LineTuple)->float:
    """
    Returns the closest point on a line to a given point in 3D space.

    Parameters:
    point (numpy.ndarray): An array of shape (3,) representing a point in 3D space.
    line (tuple): A tuple of two numpy arrays of shape (3,) representing a point on the line and the direction of the line.

    Returns:
    numpy.ndarray: An array of shape (3,) representing the closest point on the line to the given point.
    """
    # Extract point and direction from input line
    p1, v1 = line

    # Calculate vector from point to line
    w = subvec(point,  p1   )


    # Calculate parameter for closest point on line
    t = dot( w,v1) / dot( v1,v1)

    # Calculate closest point on line


    return t


# def eval_quad(t1, t2, quad: list[PointTuple, PointTuple, PointTuple, PointTuple]):
#    a, b, c, d = np.array(quad)
#    dc, ab = (d + ((c - d) * t1)), (a + ((b - a) * t1))
#    return ((dc - ab) * t2) + ab



def line_line_intersection(line1: LineTuple , line2: LineTuple )->Optional[Tuple[float,float]]:
   # Extract points and directions from input lines

   p1, v1 = line1
   p2, v2 = line2

   # Calculate direction vector of the line connecting the two points
   w = subvec(p1 , p2  )

   # Calculate direction vectors of the two input lines
   _cross = cross(v1, v2)
   if _cross == (0.0, 0.0, 0.0):
       # Lines are parallel, return None
       return None
   else:
       # Calculate parameters for point of intersection

       s1 = dot(cross(w, v2), _cross) / norm(_cross) ** 2
       s2 = dot(cross(w, v1) ,_cross) / norm(_cross)  ** 2

       # Calculate intersection point


       return  s1,s2




@dataclass(python=True)
class Line:
    start: VectorTuple
    end: VectorTuple
    direction:VectorTuple
    unit:VectorTuple
    length:float
    def __init__(self, start: VectorTuple, end:VectorTuple):
        self.start = start
        self.end = end
        self.direction = subvec(self.end, self.start)
        self.unit = unit(self.direction)
        self.length = norm(self.direction)

    def __call__(self, t: float) -> VectorTuple:
        return _evaluate_line(self.start,self.direction, t)
    @overload
    def __call__(self, t: List[float]) -> List[OptionalVectorTuple]:
        lst:List[OptionalVectorTuple]=[]
        @par(num_threads=8)
        for u in t:
            lst.append(_evaluate_line_single(self.start,self.direction, u))
        return lst



    def __repr__(self):
        return f'Line({self.start}, {self.end})'
    @property
    def a(self):
        return self.direction[0]

    @property
    def b(self):
        return self.direction[1]



    @property
    def c(self):
        return self.direction[2]
    def closest_point(self, pt:VectorTuple)->VectorTuple:
        return _evaluate_line(self.start, self.direction, closest_point_on_line(pt, (self.start, self.direction)))
    def closest_point(self, pt:List[VectorTuple])->List[VectorTuple]:
        return [self.closest_point(ppt) for ppt in pt]
    def closest_point(self, pt:List[List[float]])->List[VectorTuple]:
        return [self.closest_point((ppt[0],ppt[1],ppt[2])) for ppt in pt]
    def intersect(self, other:Line)->Tuple[VectorTuple,VectorTuple]:
        u,v=line_line_intersection(self.to_line_tuple(), other.to_line_tuple())

        return _evaluate_line(self.start, self.direction, u),_evaluate_line(other.start, other.direction, u)

    def intersect(self, pt:List[Line])->List[Tuple[VectorTuple,VectorTuple]]:
        return [self.intersect(ppt) for ppt in pt]
    def proximity(self, other:Line)->Tuple[VectorTuple,VectorTuple]:
        u,v=proximity_points(self.to_line_tuple(), other.to_line_tuple())

        return _evaluate_line(self.start, self.direction, u),_evaluate_line(other.start, other.direction, u)

    def proximity(self, other: List[Line]) -> List[Tuple[VectorTuple, VectorTuple]]:
        return [self.proximity(ppt) for ppt in other]

    def proximity_line(self, other:Line)->Line:
        u,v=proximity_points(self.to_line_tuple(), other.to_line_tuple())

        return Line(_evaluate_line(self.start, self.direction, u),_evaluate_line(other.start, other.direction, u))
    def proximity_line(self, other: List[Line]) -> List[Line]:

        return [self.proximity_line(ppt) for ppt in other]

    def to_line_tuple(self)->LineTuple:
        return self.start,self.direction

def global_to_custom(point:VectorTuple,origin:VectorTuple, xaxis:VectorTuple,yaxis:VectorTuple,zaxis:VectorTuple)->VectorList:
    return matmul_point([list(xaxis),list(yaxis),list(zaxis)], list(subvec(point,origin)))
class Plane:
    origin :Vector
    xaxis :Vector
    yaxis  :Vector
    normal:Vector

    def __init__(self, origin:Vector,xaxis:Vector,yaxis:Vector):
        self.origin=origin
        self.xaxis= xaxis.unit()
        self.yaxis = yaxis.unit()
        self.normal = self.xaxis.cross(self.yaxis)
    @overload
    def __init__(self, origin:Vector,normal:Vector):
        self.origin=origin

        self.normal=normal.unit()
        self.yaxis=self.normal.cross([1,0,0])


        l = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        self.normal = unit(self.normal)

        l.sort(key=lambda x: self.normal.dot(x))
        # print(l, self.normal)
        self.yaxis = self.normal.cross( l[0])
        self.xaxis = self.yaxis.cross(self.normal)

    
    
    def in_plane_coords(self, pt):
        """
        Точка из глобальной системы в локальную
        Parameters
        ----------
        pt
    
        Returns
        -------
    
        """
    
        return global_to_custom(pt, self.origin, self.xaxis, self.yaxis, self.normal)
    
    
    def __hash__(self):
        return hash(f"{self.origin, self.normal, self.xaxis, self.yaxis}")
    
    
    @property
    def x0(self):
        return self.origin[0]
    
    
    @property
    def y0(self):
        return self.origin[1]
    
    
    @property
    def z0(self):
        return self.origin[2]
    
    
    @property
    def a(self):
        return self.normal[0]
    
    
    @property
    def b(self):
        return self.normal[1]
    
    
    @property
    def c(self):
        return self.normal[2]
    
    
    @property
    def d(self):
        return -1 * (
            self.normal[0] * self.origin[0]
            + self.normal[1] * self.origin[1]
            + self.normal[2] * self.origin[2]
        )
    
    


    def evaluate(self, t:VectorList)->VectorList:
        u, v = t
        return [self.origin + self.xaxis * u, self.origin + self.yaxis * v]
    

    def side(self, point:Vector):
        w = point - self.origin
        return w.dot( self.normal) >= 0.0
    
    


